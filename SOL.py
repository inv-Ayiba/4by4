import itertools

def convertiontupleish(list):## locks
    array = []
    for p in range(len(list)):
        array.append(tuple(list[p]))
    return (tuple(array))
def clueposition(posit) :
    positionx = None;
    positiony = None;

    if  posit<4 and posit>=0 or posit>7 and posit<12  :
        if(posit>3):
            posit2=11-posit 
            positiony=3;positionx=posit2 
        elif(posit<4) : 
           positiony=0;positionx=posit     
    
    elif(posit>3 and posit<8 or posit>11 and posit<16) :
       
       if(posit>11):
            posit2=15-posit 
            positionx=0;positiony=posit2   
       else :
          positionx=3;positiony=posit-4     
    else:
        positionx="Notx";positiony="NOty" 
    if posit<4 :
        HV = "V"
        UDLR = "D"
    elif posit>3 and posit<8 :
        HV = "H"
        UDLR = "L"
    elif posit>6 and posit<12 :
        HV = "V"
        UDLR = "U"
    elif posit>11 :
        HV = "H"
        UDLR = "R"

    return [positionx,positiony,HV,UDLR]

def cluepositionheight(position,matrix) :
    scrapers = None
    there = matrix[clueposition(position)[1]][clueposition(position)[0]]
    p=[];
    if clueposition(position)[2]=="V" and clueposition(position)[3]== "D":
        for x in range(4) :
            p.append(matrix[x][clueposition(position)[0]]);
    elif clueposition(position)[2]=="H" and clueposition(position)[3]== "L":
        for x in range(4) :
            p.append(matrix[clueposition(position)[1]][3-x]); 
    elif clueposition(position)[2]=="V" and clueposition(position)[3]== "U": 
       for x in range(4) :
           p.append(matrix[3-x][clueposition(position)[0]]);
    elif clueposition(position)[2]=="H" and clueposition(position)[3]== "R":
       for x in range(4) :
            p.append(matrix[clueposition(position)[1]][x]); 

    #actual height
    if p[0]==4 :
        scrapers=1;
    elif p[1] ==4 :
        scrapers=2;
    elif p[2] ==4 and p[1]<p[0] :
          scrapers=2;
    elif p[2] ==4 and p[1]>p[0] : #ddd
          scrapers=3;
    elif p[3] ==4 and p[2]>p[1] and  p[1]>p[0]:
          scrapers=4;
    elif p[3] ==4 and p[1]>2:
          scrapers=3;
    elif p[3] ==4 and p[0]>2:
          scrapers=2;
    elif p[3] ==4 and p[0]>p[1] and  p[1]<p[2]:
          scrapers=3;
    
    return scrapers
def isloopgood2(arr,no):
    ecoarr= [[1, 4, 2, 3],[2, 1, 4, 3],[2, 4, 1, 3],[3, 1, 4, 2],[3, 2, 4, 1],[3, 4, 1, 2],[1, 4, 3, 2],[2, 4, 3, 1],[3, 4, 2, 1],[4, 1, 3, 2],[4, 2, 3, 1],[4, 3, 1, 2],[1, 3, 2, 4],[2, 3, 1, 4],[2, 1, 3, 4], [1, 2, 4, 3],  [1, 3, 4, 2],[2, 3, 4, 1],[3, 1, 2, 4], [3, 2, 1, 4],[4, 1, 2, 3], [4, 2, 1, 3], [4, 3, 2, 1],[1, 2, 3, 4]]
    compatable= [[3, 4, 9, 10, 11, 13, 14, 17, 19], [5, 6, 8, 10, 11, 12, 19, 22, 23], [3, 4, 9, 10, 12, 16, 18, 22, 23], [0, 2, 7, 10, 12, 13, 21, 22, 23], [0, 2, 6, 9, 11, 12, 13, 14, 20], [1, 10, 12, 14, 15, 17, 20, 22, 23], [1, 4, 13, 17, 18, 19, 20, 21, 22], [3, 11, 12, 15, 16, 18, 19, 20, 21], [1, 9, 11, 13, 14, 15, 16, 21, 23], [0, 2, 4, 8, 12, 13, 15, 17, 19], [0, 1, 2, 3, 5, 12, 13, 16, 18], [0, 1, 4, 7, 8, 14, 15, 18, 23], [1, 2, 3, 4, 5, 7, 9, 10, 21], [0, 3, 4, 6, 8, 9, 10, 15, 20], [0, 4, 5, 8, 11, 15, 16, 21, 22], [5, 7, 8, 9, 11, 13, 14, 18, 22], [2, 7, 8, 10, 14, 18, 19, 20, 21], [0, 5, 6, 9, 18, 19, 20, 21, 23], [2, 6, 7, 10, 11, 15, 16, 17, 21], [0, 1, 6, 7, 9, 16, 17, 20, 22], [4, 5, 6, 7, 13, 16, 17, 19, 23], [3, 6, 7, 8, 12, 14, 16, 17, 18], [1, 2, 3, 5, 6, 14, 15, 19, 23], [1, 2, 3, 5, 8, 11, 17, 20, 22]]
    fake=[]
    try:
        placeof0= ecoarr.index(arr[no])
    except ValueError:
        fake.append("suckit")
    else:
        
        numb=[]
        for i in range(len(arr)):
            if i==no:
                continue
            else:
                try:
                    compatable[placeof0].index(ecoarr.index(arr[i]))
                    # compatable.index(ecoarr.index(arr[i]))
                except ValueError:
                    continue
                    
                else: 
                    numb.append(i)
                
        if len(numb)<3: return "Bad"
        else: return "Good"        
def isloopgood(arr):
    hold=[]
    for i in range(4):
        if isloopgood2(arr,i)=="Good":
            hold.append(i)  
    if len(hold)<4: return "Bad"
    else: return "Good" 

def solve_puzzle(clues):
    clues= list(clues)
    #arranged so the same heights are together
    ecoarr= [[1, 4, 2, 3],[2, 1, 4, 3],[2, 4, 1, 3],[3, 1, 4, 2],[3, 2, 4, 1],[3, 4, 1, 2],[1, 4, 3, 2],[2, 4, 3, 1],[3, 4, 2, 1],[4, 1, 3, 2],[4, 2, 3, 1],[4, 3, 1, 2],[1, 3, 2, 4],[2, 3, 1, 4],[2, 1, 3, 4], [1, 2, 4, 3],  [1, 3, 4, 2],[2, 3, 4, 1],[3, 1, 2, 4], [3, 2, 1, 4],[4, 1, 2, 3], [4, 2, 1, 3], [4, 3, 2, 1],[1, 2, 3, 4]]
    matrix =[[1,2,3,4],[2,3,4,1],[3,4,1,2],[4,1,2,3]]
    arrayc=[]
    for i in range(16):
        arrayc.append(cluepositionheight(i,matrix))
    carr=((list(itertools.permutations([0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],4))))
    popy=[1102, 1163, 1543, 1586, 1624, 1647, 3769, 3930, 4027, 4068, 4210, 4391, 4694, 4875, 5594, 5614, 5715, 5735, 6078, 6219, 7576, 7757, 8499, 8660, 12651, 12692, 12914, 12935, 13312, 13373, 14069, 14310, 14877, 14998, 15413, 15694, 15800, 15901, 19066, 19367, 20432, 20450, 20711, 20773, 20894, 20946, 21007, 21235, 22353, 22394, 22616, 22637, 22794, 22855, 25020, 25161, 25461, 25622, 25719, 25760, 26384, 26404, 26505, 26525, 28386, 28527, 29309, 29430, 31016, 31397, 31478, 31859,32056, 32117, 32979, 33020, 33242, 33263, 34878, 35059, 36046, 36087, 36248, 36267, 37010, 37104, 37151, 37365, 37430, 37611, 41254, 41355, 41642, 42023, 42104, 42485, 42661, 42704, 42742, 42765, 43584, 43645, 45062, 45203, 46210, 46251, 46412, 46431, 47135, 47376, 47635, 47756, 48055, 48170, 48216, 48431, 48519, 48720, 51398, 51539, 53769, 53810, 54032, 54053, 57318, 57499, 58241, 58402, 59428, 59569, 59890, 60031, 60920, 60981, 62264, 62365, 62873, 63118, 63139, 63274, 63335, 63648, 63709, 63736,64594, 64655, 65852, 65993, 69401, 69682, 71502, 71522, 71543, 71563, 71964, 72025, 72112, 72425, 72466, 72493, 72629, 72790, 72887, 72928, 73348, 73369, 73496, 73837, 75996, 76177, 79290, 79351, 79545, 79866, 81075, 81196, 81666, 81686, 81707, 81727, 82459, 82540, 82569, 82650, 83030, 83091, 83492, 83553, 83695, 83856, 83953, 83994, 85679, 85920, 88947, 88988, 89669, 89892, 89913, 90070, 90732, 90833, 91236, 91297, 91326, 91427, 91655, 91698, 91736, 91759, 92229, 92350, 94535, 94576, 95202, 95383,95707, 95868, 95965, 96006, 96630, 96771, 97492, 97533, 97694, 97713, 99573, 99614, 100761, 100802, 101181, 101262, 101358, 101459, 102281, 102362, 103042, 103383, 103965, 104286, 106312, 106493, 106815, 106936, 107235, 107396, 107493, 107534, 107656, 107697, 107858, 107877, 108600, 108781, 111367, 111386, 111407, 111448, 111806, 111867, 113247, 113528, 114170, 114431, 116960, 117141, 117515, 117796, 118745, 118986, 120408, 120469, 120623, 120846, 120867, 121024, 122895, 122976, 123072, 123173, 123516, 123534, 123635, 123697, 124900, 125041, 127078, 127219,128066, 128167, 128486, 128506, 128607, 128627, 128948, 129042, 129089, 129303, 129409, 129530, 129851, 130012, 130827, 131148, 131715, 131756, 132157, 132176, 132197, 132238, 136821, 136902, 138188, 138208, 138309, 138329, 139532, 139713, 139993, 140108, 140154, 140369, 141011, 141292, 142014, 142115, 142299, 142380, 142476, 142577, 142760, 142821, 144782, 144803, 147005, 147046, 148836, 148977, 150621, 150822, 151366, 151507, 152682, 152743, 152772, 152873, 153849, 153930, 154026, 154127, 155356, 155410, 155471, 155657, 155880, 156101, 158186, 158327, 158584, 158765,161992, 162133, 162849, 162970, 163265, 163308, 163346, 163369, 163727, 163808, 164634, 164652, 164753, 164815, 165572, 165593, 165982, 166036, 166097, 166283, 167401, 167482, 169210, 169391, 171144, 171285, 173604, 173624, 173645, 173665, 174003, 174124, 174693, 174974, 176670, 176891, 177921, 178035, 178082, 178276, 178496, 178717, 178958, 179179, 179419, 179437, 179558, 179620, 180826, 181007, 183350, 183411, 183768, 183788, 183809, 183829, 184816, 185157, 188640, 188901, 188966, 189101, 189147, 189342, 189545, 189563, 189804, 189866, 190024, 190245, 190929, 191210,192395, 192516, 194394, 194455, 194725, 194806, 194835, 194916, 195944, 196205, 196510, 196651, 198355, 198436, 198711, 198825, 198872, 199066, 199266, 199527, 200650, 200670, 200851, 200871, 202077, 202238, 202480, 202781, 204706, 205019, 205060, 205087, 205460, 205521, 206067, 206388, 209450, 209671, 209756, 209891, 209937, 210132, 210814, 210834, 211015, 211035, 211622, 211723, 214484, 214625, 215186, 215287, 215387, 215548, 215645, 215686, 216086, 216147, 218615, 218656, 220076, 220297, 220499, 220517, 220758, 220820, 221440, 221460, 221641, 221661, 222805, 223046,224668, 224769, 226270, 226291, 226453, 226614, 226711, 226752, 227129, 227170, 228759, 228840, 229796, 229937, 230701, 230719, 230840, 230902, 231142, 231363, 231604, 231624, 231805, 231825, 234338, 234356, 234617, 234679, 234758, 235139, 235220, 235601, 236123, 236368, 236389, 236524, 236582, 236923, 240358, 240539, 240820, 241001, 242576, 242677, 243961, 243980, 244001, 244042, 244964, 245016, 245077, 245305, 245384, 245765, 245846, 246227, 246749, 247062, 247123, 247150, 248124, 248305, 249508, 249649, 252375, 252656, 253759, 254000, 254587, 254606, 254627, 254668]
      
    for g in range(23000): 
        matrix= [ecoarr[carr[popy[g]][0]],ecoarr[carr[popy[g]][1]],ecoarr[carr[popy[g]][2]],ecoarr[carr[popy[g]][3]] ]
        for i in range(16):
            if clues[i]==0:
                arrayc[i]=0
            else:
                arrayc[i]=(cluepositionheight(i,matrix))
        
        if arrayc==clues :
            break
       
    return (convertiontupleish(matrix) )

clues = (
( 2, 2, 1, 3,  
  2, 2, 3, 1,  
  1, 2, 2, 3,  
  3, 2, 1, 3 ),
( 0, 0, 1, 2,   
  0, 2, 0, 0,   
  0, 3, 0, 0, 
  0, 1, 0, 0 ),
( 1, 2, 4, 2,  
  2, 1, 3, 2,  
  3, 1, 2, 3,  
  3, 2, 2, 1 )
)


outcomes = (
( ( 1, 3, 4, 2 ),       
  ( 4, 2, 1, 3 ),       
  ( 3, 4, 2, 1 ),
  ( 2, 1, 3, 4 ) ),
( ( 2, 1, 4, 3 ), 
  ( 3, 4, 1, 2 ), 
  ( 4, 2, 3, 1 ), 
  ( 1, 3, 2, 4 ) ),
( ( 4, 2, 1, 3 ),  
  ( 3, 1, 2, 4 ),  
  ( 1, 4, 3, 2 ),
  ( 2, 3, 4, 1 ) ),
)

for x in range(3):
   
   print(solve_puzzle(clues[x]) == outcomes[x])